// @hash v2-3CCE9C24AC4CBA59402B6E8E9175E248
// Automatically generated by ReactJS.NET. Do not edit, your changes will be overridden.
// Version: 1.5.2 (build 05eb7cc)
// Generated at: 2015-06-02 15:24:31
///////////////////////////////////////////////////////////////////////////////

var LocationChecker = React.createClass({displayName: "LocationChecker",
	unlock: function(isSuspicious){
		var gameRiddle = this.state.gameRiddle;
		gameRiddle.hasQuestions = true;
		this.setState({isUnlocked: true, isSuspicious: isSuspicious});
	},
	handleReturn: function(){
		this.props.onReturn();
	},
	handleForceUnlock: function(){
		this.unlock(true);
	},
	handlePosition: function(position){
		$.post("/game/CalculateDistance",
			{
				sLatitude: position.coords.latitude,
				sLongitude: position.coords.longitude,
				eLatitude: this.state.lat,
				eLongitude: this.state.lng
			},
			function(distance){
				distance = Math.round(distance);
				if(distance <= 50){
					this.unlock(false);
				}else{
					this.setState({distance: distance, showAlternative: true});
				}
			}.bind(this),"json");
	},
	handleError: function(error){
	/*
		switch(error.code) {
			case error.PERMISSION_DENIED:
				console.log("User denied the request for Geolocation.");
				break;
			case error.POSITION_UNAVAILABLE:
				console.log("Location information is unavailable.");
				break;
			case error.TIMEOUT:
				console.log("The request to get user location timed out.");
				break;
			case error.UNKNOWN_ERROR:
				console.log("An unknown error occurred.");
				break;
		}*/
		this.setState({showAlternative: true});
	},
	handleCheckLocation: function(){
		if (navigator.geolocation) {
			navigator.geolocation.getCurrentPosition(this.handlePosition);
		} else {
			this.setState({showAlternative: true});
		}
	},
	componentWillReceiveProps: function(nextProps){
		var riddle = nextProps.gameRiddle.riddle;
		var location = riddle.LocationName;
		var lat = riddle.Latitude;
		var lng = riddle.Longitude;
        this.setState({gameRiddle:nextProps.gameRiddle, lat : lat, lng: lng, location: location });
    },
	getInitialState: function(){		
		var riddle = this.props.gameRiddle.riddle;
		var location = riddle.LocationName;
		var lat = riddle.Latitude;
		var lng = riddle.Longitude;
		return { gameRiddle:this.props.gameRiddle, lat : lat, lng: lng, location: location };
	},
	render: function(){
		var unlocked, altbutton, suspicious, distanceMessage;
		if(this.state.distance){
			distanceMessage = React.createElement("p", null, "Du befinner dig just nu ca ", this.state.distance, " m därifrån");
		}
		if(this.state.showAlternative){
			altbutton = React.createElement("p", null, React.createElement("button", {className: "btn btn-red", onClick: this.handleForceUnlock}, "Jag svär jag är där!"));
		}
		if(this.state.isSuspicious){
			suspicious = React.createElement("img", {src: "/images/suspicious.jpg", alt: "Suspicious"});
		}
		return (
			React.createElement("div", null, 
				React.createElement("h2", {className: "content-sub-heading"}, "Bege dig till ", this.state.location), 
				
					this.state.isUnlocked ?
					React.createElement("div", null, 
						suspicious, 
						React.createElement("p", null, 
							"Platsen är upplåst!"
						)
					)
					:
					React.createElement("div", null, 
						React.createElement("p", null, 
							"Du måste befinna dig inom 50 m från platsen."
						), 
						distanceMessage, 
						React.createElement("button", {className: "btn btn-blue", onClick: this.handleCheckLocation}, "Jag är där"), 
						altbutton
					), 
				
				React.createElement("p", null, 
					React.createElement("a", {href: "#", onClick: this.handleReturn}, "Tillbaka")
				), 
				React.createElement(GoogleMap, {lat: this.state.lat, lng: this.state.lng})
			)
		);
	}
});
