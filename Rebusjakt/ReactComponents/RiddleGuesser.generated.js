// @hash v2-609FB1CF92295B1288FE9464897C5E82
// Automatically generated by ReactJS.NET. Do not edit, your changes will be overridden.
// Version: 1.5.2 (build 05eb7cc)
// Generated at: 2015-06-02 15:24:31
///////////////////////////////////////////////////////////////////////////////
    

    var RiddleEndGame = React.createClass({displayName: "RiddleEndGame",
		completedGuessing: function(){
			this.props.onSolved(this.props.isWinner);
		},
        render: function(){
            return(
                React.createElement("div", null, 
                    
                        this.props.isWinner ? 
                        React.createElement("div", null, 
                            React.createElement("h2", {className: "content-sub-heading"}, "Bra där du gissade rätt"), 
							React.createElement("p", null, 
								"Bege dig till ", React.createElement("strong", null, this.props.riddle.LocationName), " för att hämta rebusens frågor."
                            ), 
							React.createElement("a", {href: "#", onClick: this.completedGuessing}, "Återgå till rebuslistan"), 
                            React.createElement(GoogleMap, {lat: this.props.riddle.Latitude, lng: this.props.riddle.Longitude})
                        ) : 
                        React.createElement("div", null, 
                            React.createElement("h2", {className: "content-sub-heading"}, "Fel fel fel!"), 
							React.createElement("p", {dangerouslySetInnerHTML: {__html: emojione.toImage(":worried:")}}), 
							React.createElement("a", {href: "#", onClick: this.completedGuessing}, "Återgå till rebuslistan")
                        )
                    
                )
                );
        }
    });


    var RiddleGuesser = React.createClass({displayName: "RiddleGuesser",
        handleHasAnswered : function(isCorrect) {
            this.setState({ isOver : true, isWinner : isCorrect });
        },
        handleGuess : function(guess){
            //check if wrong guess - and check against no of wrong guesses
            guess = guess.toUpperCase();
            var guessCount = this.state.guesscount;
            guessCount++;
            var guesses = this.state.guesses;
            guesses.push(guess);
            var guessWord = this.state.guessword;
            var answer = this.state.riddle.Answer;
            var wrongcount = this.state.wrongcount;
            if(guess.length > 1){
                if(guess === answer){
                    this.endGuessing(true);
                    return false;
                }else{
                    wrongcount++;
                }
            }else{
                var guessWordChars = guessWord.split('');
                var answerChars = answer.split('');
                var hasHit = false;
                for(var i = 0; i < answer.length; i++){
                    if(answer[i] === guess){
                        guessWordChars[i] = guess;
                        hasHit = true;
                    }                        
                }
                if(!hasHit)
                    wrongcount++;

                guessWord = guessWordChars.join('');
            }
            if(guessWord === answer){
                this.endGuessing(true);
                return false;
            }
            if(wrongcount >= this.props.maxwrong){
                this.endGuessing(false);
                return false;
            }
            this.setState({guesscount:guessCount, wrongcount: wrongcount, guessword: guessWord, guesses : guesses, isOver : false });
        },
        
		handleSolved: function(isWinner){
			var gameRiddle = this.state.gameRiddle;
			gameRiddle.isSolved = true;
			gameRiddle.isCorrect = isWinner;
			if(!isWinner){
				gameRiddle.isCompleted = true;
			}
			this.props.onSolved(gameRiddle);
		},
		handleReturn: function(){
			this.props.onReturn();
		},
        componentWillReceiveProps : function(nextProps){
			var riddle = nextProps.gameRiddle.riddle;
            this.setState({ gameRiddle: nextProps.gameRiddle, riddle: riddle, isOver: false });
        },
        getInitialState: function() {
			var riddle = this.props.gameRiddle.riddle;
            return { gameRiddle: this.props.gameRiddle, riddle: riddle, isOver : false };
        },
        render: function () { 
                
                return (
                    React.createElement("div", null, 
                         
                            this.state.isOver ? 
                            React.createElement(RiddleEndGame, {isWinner: this.state.isWinner, riddle: this.state.riddle, onSolved: this.handleSolved}) : 
                            React.createElement("div", null, 
								React.createElement("h2", {className: "content-sub-heading"}, "Lös rebus"), 
								React.createElement("p", {dangerouslySetInnerHTML: {__html: emojione.toImage(this.state.riddle.Description)}}), 
                                React.createElement(TextGuesser, {answer: this.state.riddle.Answer, maxwrong: this.props.maxwrong, onHasAnswered: this.handleHasAnswered}), 
								React.createElement("p", null, 
									React.createElement("a", {href: "#", onClick: this.handleReturn}, "Återgå till rebuslistan")
								)
                            )
                        
                        
                    )                
                );
        }
    });
   