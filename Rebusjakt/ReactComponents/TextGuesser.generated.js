// @hash v2-99B764AC45C4B3677FFBED8BBFB8DC3C
// Automatically generated by ReactJS.NET. Do not edit, your changes will be overridden.
// Version: 1.5.2 (build 05eb7cc)
// Generated at: 2015-06-02 15:24:31
///////////////////////////////////////////////////////////////////////////////
var TextGuessingResult = React.createClass({displayName: "TextGuessingResult",
    render: function(){        
        var styling = {letterSpacing:'5px', fontSize:'1.5em'};
		var wrongWords, wrongGuessesLeft;
		if(this.props.wrongGuesses.length > 0){
			wrongGuessesLeft = this.props.maxwrong - this.props.wrongGuesses.length;
			var guessNodes = this.props.wrongGuesses.map(function(word, i){
				return(
						React.createElement("div", {key: i, className: "tile tile-red"}, React.createElement("div", {className: "tile-inner"}, word))
					);
			});
			wrongWords = (React.createElement("div", {className: "tile-wrap"}, 
							guessNodes, 
							React.createElement("div", {className: "tile"}, React.createElement("div", {className: "tile-inner"}, "Du kan gissa fel ", React.createElement("strong", null, wrongGuessesLeft), " ggr till"))
						));
		}
        return(
            React.createElement("div", null, 
                React.createElement("label", {style: styling}, this.props.guessword), 
                wrongWords
            )
            );
    }
});

var TextGuessingForm = React.createClass({displayName: "TextGuessingForm",
    handleSubmit: function(e){
        e.preventDefault();
        var guessNode = this.refs.guess.getDOMNode();
        var guess = guessNode.value.trim();
        this.props.onGuess(guess);
        guessNode.value = '';
    },
	componentDidUpdate: function(){
		$(".txt-guess").focus();
	},
    render: function(){
        return(
            React.createElement("form", {onSubmit: this.handleSubmit, className: "form"}, 
				React.createElement("div", {className: "form-group"}, 
					React.createElement("div", {className: "row"}, 
						React.createElement("div", {className: "col-lg-12"}, 							
							React.createElement("label", null, "Skriv in hela ordet/meningen eller gissa på en bokstav/siffra i taget"), 
							React.createElement("input", {type: "text", className: "txt-guess form-control form-control-default input-inline", placeholder: "Gissning", ref: "guess"}), 
							React.createElement("input", {type: "submit", className: "btn btn-blue btn-inline", value: "Gissa"})
						)
					)
				)
            )
            );
    }
});

var TextGuesser = React.createClass({displayName: "TextGuesser",
	endGuessing : function(isCorrect) {
		this.props.onHasAnswered(isCorrect);
    },
	handleGuess: function(guess){
		//check if wrong guess - and check against no. of wrong guesses
        guess = guess.toUpperCase();
        var wrongGuesses = this.state.wrongGuesses;
        var guessWord = this.state.guessword;
        var answer = this.props.answer;
        if(guess.length > 1){
            if(guess === answer){
                this.endGuessing(true);
                return false;
            }else{
				wrongGuesses.push(guess);
            }
        }else{
            var guessWordChars = guessWord.split('');
            var answerChars = answer.split('');
            var hasHit = false;
            for(var i = 0; i < answer.length; i++){
                if(answer[i] === guess){
                    guessWordChars[i] = guess;
                    hasHit = true;
                }                        
            }
            if(!hasHit)
                wrongGuesses.push(guess);

            guessWord = guessWordChars.join('');
        }
        if(guessWord === answer){
            this.endGuessing(true);
            return false;
        }
        if(wrongGuesses.length >= this.props.maxwrong){
            this.endGuessing(false);
            return false;
        }
        this.setState({wrongGuesses: wrongGuesses, guessword: guessWord });
	},
	initGuessWord : function(answerWord){
        var answer = answerWord.split('');
        var guessWord = '';
        for (var i = 0; i < answer.length; i++) {
            guessWord += answer[i] === ' ' ? " " : "_";
        }
        return guessWord;
    },
	componentWillReceiveProps : function(nextProps){
        this.setState({ guessword: this.initGuessWord(nextProps.answer), wrongGuesses: [] });
    },
    getInitialState: function() {
        return { guessword: this.initGuessWord(this.props.answer), wrongGuesses: [] };
    },
	render: function(){
		return(
			React.createElement("div", null, 
				React.createElement(TextGuessingResult, {guessword: this.state.guessword, wrongGuesses: this.state.wrongGuesses, maxwrong: this.props.maxwrong}), 
				React.createElement(TextGuessingForm, {onGuess: this.handleGuess})
			)
		);
	}
});