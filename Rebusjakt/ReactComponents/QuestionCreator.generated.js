// @hash v2-6714D2D97472904E29F3B980E261337F
// Automatically generated by ReactJS.NET. Do not edit, your changes will be overridden.
// Version: 1.5.2 (build 05eb7cc)
// Generated at: 2015-06-02 15:24:31
///////////////////////////////////////////////////////////////////////////////


    var QuestionForm = React.createClass({displayName: "QuestionForm",
        handleSubmit: function(e){
            e.preventDefault();
            var questiontype = this.getDOMNode().querySelector('[name="AnswerType"]:checked').value;
            var question = {};
            $("#question-form").serializeArray().map(function(x){
                question[x.name] = x.value;
            }); 
			var answer = question.Answer.toLowerCase();
			if(questiontype === "trueorfalse" && answer !== "true" && answer !== "false"){
				alert("Du måste skriva true eller false som svar");
				return false;
			}
            $("#question-form .make-empty").each(function(){
                $(this).val('');
            });
            this.props.onQuestionSubmit(question);
        },
		handleCancel: function(e){
			e.preventDefault();
			var original = this.state.original;
			var question = this.state.question;
			question =  $.extend(true, question, original); //copy back from original
			this.setState({ question: question });
			this.props.onQuestionCancel();
		},
        handleOptionClick: function(e){
            var multichoiche = this.refs.multi.getDOMNode();
            if(multichoiche.checked){
                $(".answersoptions-container").removeClass("hide");
            }else{
                $(".answersoptions-container").addClass("hide");
            }
        },
        handleChange: function(attribute, event) {            
            var question = this.state.question;    
            question[attribute] = event.target.value;
            this.setState({question: question});
        },
        getInitialState: function() {
			var original = $.extend(true, {}, this.props.question); //copy
            return { question: this.props.question, original: original};
        },
        render: function(){
			var answerOptionsClasses = "answersoptions-container";			
			if(this.state.question.AnswerType !== "multi"){
				answerOptionsClasses += " hide";
			}
            return(
				React.createElement("div", null, 
                React.createElement("form", {id: "question-form", onSubmit: this.handleSubmit, className: "form"}, 
                    React.createElement("input", {type: "hidden", name: "Id", value: this.props.question.Id}), 
                    React.createElement("input", {type: "hidden", name: "RiddleId", value: this.props.question.RiddleId}), 
                    React.createElement("div", {className: "form-group"}, 
						React.createElement("div", {className: "row"}, 
							React.createElement("div", {className: "col-lg-6 col-md-8 col-sm-10"}, 
								React.createElement("label", null, "Fråga"), 
								React.createElement("textarea", {cols: "30", rows: "3", name: "Description", className: "form-control form-control-default make-empty", value: this.state.question.Description, onChange: this.handleChange.bind(this, "Description")})
							)
						)
					), 
					React.createElement("div", {className: "form-group"}, 
						React.createElement("label", null, "Välj typ av svar"), 
						React.createElement("div", {className: "radio radio-adv"}, 
							React.createElement("label", {htmlFor: "input-radio-1"}, 
								React.createElement("input", {className: "access-hide", id: "input-radio-1", name: "AnswerType", value: "text", type: "radio", checked: this.state.question.AnswerType === "text", onClick: this.handleOptionClick, onChange: this.handleChange.bind(this, "AnswerType")}), "Text som svar", 
								React.createElement("span", {className: "circle"}), 
								React.createElement("span", {className: "circle-check"})
							)
						), 
						React.createElement("div", {className: "radio radio-adv"}, 
							React.createElement("label", {htmlFor: "input-radio-2"}, 
								React.createElement("input", {className: "access-hide", id: "input-radio-2", name: "AnswerType", value: "number", type: "radio", checked: this.state.question.AnswerType === "number", onClick: this.handleOptionClick, onChange: this.handleChange.bind(this, "AnswerType")}), "Siffra som svar", 
								React.createElement("span", {className: "circle"}), 
								React.createElement("span", {className: "circle-check"})
							)
						), 
						React.createElement("div", {className: "radio radio-adv"}, 
							React.createElement("label", {htmlFor: "input-radio-3"}, 
								React.createElement("input", {className: "access-hide", id: "input-radio-3", name: "AnswerType", value: "multi", ref: "multi", type: "radio", checked: this.state.question.AnswerType === "multi", onClick: this.handleOptionClick, onChange: this.handleChange.bind(this, "AnswerType")}), "Flerval", 
								React.createElement("span", {className: "circle"}), 
								React.createElement("span", {className: "circle-check"})
							)
						), 
						React.createElement("div", {className: "radio radio-adv"}, 
							React.createElement("label", {htmlFor: "input-radio-4"}, 
								React.createElement("input", {className: "access-hide", id: "input-radio-4", name: "AnswerType", value: "trueorfalse", type: "radio", checked: this.state.question.AnswerType === "trueorfalse", onClick: this.handleOptionClick, onChange: this.handleChange.bind(this, "AnswerType")}), 
								"Sant eller falskt ", React.createElement("small", null, "(skriv ", React.createElement("strong", null, "true"), " eller ", React.createElement("strong", null, "false"), " som svar)"), 
								React.createElement("span", {className: "circle"}), 
								React.createElement("span", {className: "circle-check"})
							)
							
						)
					), 
					React.createElement("div", {className: "form-group " + answerOptionsClasses}, 
						React.createElement("div", {className: "row"}, 
							React.createElement("div", {className: "col-lg-6 col-md-8 col-sm-10"}, 
								React.createElement("textarea", {cols: "30", rows: "3", className: "form-control form-control-default make-empty", name: "AnswerOptions", ref: "answeroptions", value: this.state.question.AnswerOptions, onChange: this.handleChange.bind(this, "AnswerOptions")}), 
							React.createElement("span", {className: "form-help form-help-msg"}, "Skriv in alternativ till svaret separerade med kommatecken ", React.createElement("strong", null, "(obs skriv ej in det faktiska svaret/svaren bland alternativen)"))
							)
						)						
					), 
					React.createElement("div", {className: "form-group"}, 
						React.createElement("div", {className: "row"}, 
							React.createElement("div", {className: "col-lg-6 col-md-8 col-sm-10"}, 
								React.createElement("label", null, "Svar"), 
								React.createElement("textarea", {cols: "30", rows: "3", className: "form-control form-control-default make-empty", name: "Answer", ref: "Answer", value: this.state.question.Answer, onChange: this.handleChange.bind(this, "Answer")}), 
								React.createElement("span", {className: "form-help form-help-msg " + answerOptionsClasses}, "Ska man välja flera alternativ för att svara rätt kan du separera svaren med kommatecken.")
							)
						)						
					), 
					React.createElement("div", {className: "form-group-btn"}, 
						React.createElement("div", {className: "row"}, 
							React.createElement("div", {className: "col-lg-6 col-md-8 col-sm-10"}, 
								React.createElement("button", {className: "btn btn-blue waves-button waves-light waves-effect", type: "submit"}, "Spara"), 
								" ", 
								React.createElement("a", {className: "btn btn-flat btn-red waves-button waves-effect", onClick: this.handleCancel}, "Avbryt")
							)
						)
					)
                )
				)
                );
        }
    });    

    var QuestionList = React.createClass({displayName: "QuestionList",
            handleEditClick: function(question){
                this.props.onQuestionEdit(question);
            },            
            handleDeleteClick: function(question){
                this.props.onQuestionDelete(question);
            },
            render: function(){
                var questionNodes = this.props.data.map(function(question){
                return (
					React.createElement("div", {className: "col-lg-3 col-md-4 col-sm-6"}, 
						React.createElement("div", {className: "card"}, 
							React.createElement("div", {className: "card-main"}, 
								React.createElement("div", {className: "card-inner"}, 
									React.createElement("p", {className: "card-heading text-alt"}, question.Name), 
									React.createElement("p", null, 
										question.Description
									), 
									React.createElement("p", null, 
										question.Answer
									)
								), 
								React.createElement("div", {className: "card-action"}, 
									React.createElement("ul", {className: "nav nav-list pull-left"}, 
										React.createElement("li", null, 
											React.createElement("a", {href: "#", onClick: this.handleEditClick.bind(this, question), title: "Ändra"}, React.createElement("span", {className: "access-hide"}, "Ändra"), React.createElement("span", {className: "icon icon-edit"}))
										), 
										React.createElement("li", null, 
											React.createElement("a", {href: "#", onClick: this.handleDeleteClick.bind(this, question), title: "Ta bort"}, React.createElement("span", {className: "access-hide"}, "Ta bort"), React.createElement("span", {className: "icon icon-delete"}))
										)
									)
								)
							)
						)
					)
				);
            }.bind(this));
            return (
				React.createElement("div", {className: "card-wrap"}, 
					React.createElement("div", {className: "row"}, 
                        questionNodes
                    )
                )
                );
        }    
    });

    var QuestionCreator = React.createClass({displayName: "QuestionCreator",
        handleQuestionSubmit: function(question){
            if(question.Id > 0){
                this.saveQuestionEdit(question);
            }else{
                this.saveNewQuestion(question);
            }                        
        },
		handleQuestionCancel: function(){
			var questions = this.state.data;
			this.setState({ data: questions, showForm: false });
		},
        saveNewQuestion: function(question){
            var questions = this.state.data;
            $.post("/riddleadmin/AddQuestion",question, function(response){
                if(response.errors.length === 0){
                    questions.unshift(response.question); 
                    this.setState({ data: questions, showForm: false });
                }else{
                    console.log(response.errors);
                }
            }.bind(this),"json");
        },
        saveQuestionEdit: function(question){
            var questions = this.state.data;
            $.post("/riddleadmin/EditQuestion",question, function(response){
                if(response.errors.length === 0){
                    this.setState({ data: questions, showForm: false });
                }else{
                    console.log(response.errors);
                }
            }.bind(this),"json");
        },
        handleQuestionsComplete: function(){
            this.props.onQuestionsComplete();
        },
        handleQuestionEdit: function(question){        
            this.setState({ question: question, showForm: true  });
        },
        handleNewQuestion: function(){
            var question = { Id : 0, RiddleId : this.state.riddle.Id };
            this.setState({question: question, showForm: true});
        },
        handleQuestionDelete: function(question){
			if(!confirm("Är du säker på att du vill ta bort frågan?")){
				return false;
			}
            var questions = this.state.data;
            $.post("/riddleadmin/deletequestion",{id : question.Id }, "json");
            for(var i = questions.length-1; i >= 0; i--){
                if(questions[i].Id === question.Id){
                    questions.splice(i, 1);    
                    break;
                }
            }
            this.setState({ data: questions });
        },
        componentWillReceiveProps : function(nextProps){
            var question = { Id : 0, RiddleId : nextProps.riddle.Id };
            this.setState({ data: nextProps.riddle.Questions, riddle : nextProps.riddle, question: question, showForm: false });
        },
        getInitialState: function () {
            var question = { Id : 0, RiddleId : this.props.riddle.Id };
			var showForm = this.props.riddle.Questions ? false : true;
            return { data: this.props.riddle.Questions, riddle : this.props.riddle, question: question, showForm : showForm };
        },
        render: function () {
            var questionForm, questionList, newButton, backButton;
            if(this.state.showForm){
                questionForm = React.createElement(QuestionForm, {onQuestionSubmit: this.handleQuestionSubmit, question: this.state.question, onQuestionCancel: this.handleQuestionCancel});
            }else{
                questionList = React.createElement(QuestionList, {data: this.state.data, onQuestionEdit: this.handleQuestionEdit, onQuestionDelete: this.handleQuestionDelete, onNewQuestion: this.handleNewQuestion});
                newButton = React.createElement("button", {className: "btn btn-blue", onClick: this.handleNewQuestion}, "Ny fråga");  
				backButton =  React.createElement("button", {onClick: this.handleQuestionsComplete, className: "btn btn-primary"}, "Klar med frågor");           
            }
            
            return (
                React.createElement("div", {className: "question-creator"}, 
                    React.createElement("h2", {className: "content-sub-heading"}, "Hantera frågor för rebus med svaret ", this.props.riddle.Answer), 
                    questionForm, 
                    newButton, 
                    questionList, 
					backButton
                )
                );
        }
    });